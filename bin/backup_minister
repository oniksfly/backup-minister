#!/usr/bin/env ruby
require 'backup_minister'
require 'thor'

class CLI < Thor
desc 'backup_database', 'Backup DB and place it one remote server.'
  option :project_name, type: :string, required: true, aliases: :name
  def backup_database
    agent = BackupMinister::Agent.new
    backup_file_path = agent.backup_database(options[:project_name])
    if backup_file_path
      digest = agent.file_sha256_hash(backup_file_path)
      placed_file_path = agent.place_database_backup(backup_file_path)
      if agent.process_remote_database_backup(options[:project_name], placed_file_path, digest)
        LOGGER.info "Database for project #{options[:project_name]} placed on remote server."
      else
        LOGGER.error "Could not place database backup for project #{options[:project_name]} on remote server."
        exit!(true)
      end
    else
      LOGGER.error "Could not create database backup for project #{options[:project_name]}."
      exit!(true)
    end
  end

  desc 'backup_database', 'Move database TAR GZ archive to destination directory'
  option :project_name, type: :string, required: true, aliases: :name
  option :file, type: :string, required: true, banner: '</Path/to/database/backup.tar.gz>'
  option :sha256, type: :string, banner: 'Hash of uploaded file'
  def store_database_backup
    server = BackupMinister::Server.new
    if server.place_database_backup(options[:project_name], options[:file])
      LOGGER.info "Database for project #{options[:project_name]} backed up."
    else
      LOGGER.error "Could not complete backup #{options[:project_name]}."
      exit!(true)
    end
  end

  desc 'sync_path', 'Server\'s path for files'
  option :project_name, type: :string, required: true, aliases: :name
  def sync_path
    server = BackupMinister::Server.new
    path = server.project_files_location(options[:project_name])
    if path.nil?
      exit!(true)
    else
      puts path
    end
  end
end

CLI.start(ARGV)